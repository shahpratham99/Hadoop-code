

//Q-1 Develop a MapReduce job that will split each line of the input text file in to tokens and then
//count the occurrences of each unique token. The input text file should be available on the
//HDFS. The output will be in the form of:
//Hadoop 5
//Hotspot 2

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

import java.io.IOException;

public class MapReduceJob {

    // Mapper class
    public static class TokenMapper extends Mapper<Object, Text, Text, IntWritable> {

        private final static IntWritable one = new IntWritable(1);
        private Text word = new Text();

        @Override
        protected void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            // Split the line into tokens
            String[] tokens = value.toString().split("\\s+");
            
            for (String token : tokens) {
                // Emit each token with a count of 1
                word.set(token);
                context.write(word, one);
            }
        }
    }

    // Reducer class
    public static class TokenReducer extends Reducer<Text, IntWritable, Text, IntWritable> {

        private IntWritable result = new IntWritable();

        @Override
        protected void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
            int sum = 0;
            
            // Sum up the counts for each token
            for (IntWritable val : values) {
                sum += val.get();
            }
            
            result.set(sum);
            context.write(key, result);
        }
    }

    // Driver class
    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.err.println("Usage: MapReduceJob <input path> <output path>");
            System.exit(-1);
        }

        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Token Count");
        job.setJarByClass(MapReduceJob.class);
        job.setMapperClass(TokenMapper.class);
        job.setReducerClass(TokenReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        job.setOutputFormatClass(TextOutputFormat.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
-----------------------------------
f.txt :
hello Toaday is day.day is which
which skotch whiskey.
-----------------------------------
user@user-H410M-S2-V3:~$ hadoop fs -mkdir /hello
user@user-H410M-S2-V3:~$ hadoop fs -put /home/user/f.txt /hello
user@user-H410M-S2-V3:~$ hadoop fs -ls /hello
hadoop jar /home/user/mapr.jar /hello/f.txt /hello/out
hadoop fs -ls /hello/out
hadoop fs -cat /hello/out/part-r-00000

===========================================================================================

